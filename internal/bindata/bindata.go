// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_init_mg.down.sql (511B)
// 000001_init_mg.up.sql (511B)
// 000002_init_mg.down.sql (508B)
// 000002_init_mg.up.sql (508B)

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_mgDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\x83\x40\x10\x86\xef\x7d\x8a\x39\xb6\x09\x26\x34\x1e\x7b\x5a\xe9\xa0\x1b\xa1\x25\xc3\xd4\xd8\x93\x59\x76\x01\x8d\xcb\xd6\xb0\x90\xbe\xbe\xb1\x1a\x8c\xab\x24\x5e\xff\x6f\xf2\xcf\x37\xb3\xa5\x7d\x01\x2c\x6e\x32\x04\x99\x02\x3e\xca\x92\x4b\x18\x7d\xdd\xfb\xcd\xe2\x4f\x76\xea\xcd\x3c\xd4\x4d\xbb\x59\x24\x84\x82\xf1\x8b\xe9\xa6\x85\xe5\x8b\x01\xb9\x63\xbc\x45\x82\x82\x64\x2e\xe8\x08\xf7\x78\x8c\xa0\xb1\xaa\xa5\xd1\x09\x63\x7a\x78\x10\x94\xdc\x09\x5a\xae\xe3\x78\xf5\x41\x5c\xf7\x23\x5a\x05\xbd\x17\xc5\xf9\x66\xdb\xba\xa0\xf1\xcd\x9f\x83\x64\x38\xbd\xd6\xdf\x53\xd7\x97\xec\x3c\x98\x67\x48\xb3\xbd\x60\xd8\x62\x2a\x0e\x19\x43\x1c\x41\xa5\xac\x72\xba\x0e\x41\xe8\xf4\xf9\x9a\x79\x29\xd7\x55\x81\x82\x1f\xfc\x3f\xa4\x94\xd6\x63\xaf\x6c\xb0\xfe\x6a\x1d\xc1\xe0\x81\x65\x8e\x25\x8b\xbc\x98\x40\x72\x20\xc2\x1d\x3f\x4d\x24\x02\x3f\x76\x95\xb2\xfe\xf7\x01\xef\x01\x00\x00\xff\xff\xdc\x5e\x7b\x7d\xff\x01\x00\x00")

func _000001_init_mgDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_mgDownSql,
		"000001_init_mg.down.sql",
	)
}

func _000001_init_mgDownSql() (*asset, error) {
	bytes, err := _000001_init_mgDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_mg.down.sql", size: 511, mode: os.FileMode(0644), modTime: time.Unix(1716069650, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0x9e, 0x3, 0x2a, 0xf, 0x8c, 0x9e, 0xe1, 0xda, 0x18, 0xf2, 0x1e, 0x4e, 0x63, 0x36, 0xd6, 0xac, 0x4f, 0x2c, 0xf4, 0xab, 0x8e, 0xef, 0xcc, 0x4b, 0x11, 0x24, 0x64, 0x2f, 0xb, 0x87, 0x4}}
	return a, nil
}

var __000001_init_mgUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4e\x83\x40\x10\x86\xef\x7d\x8a\x39\xb6\x09\x26\x34\x1e\x7b\x5a\xe9\xa0\x1b\xa1\x25\xc3\xd4\xd8\x93\x59\x76\x01\x8d\xcb\xd6\xb0\x90\xbe\xbe\xb1\x1a\x8c\xab\x24\x5e\xff\x6f\xf2\xcf\x37\xb3\xa5\x7d\x01\x2c\x6e\x32\x04\x99\x02\x3e\xca\x92\x4b\x18\x7d\xdd\xfb\xcd\xe2\x4f\x76\xea\xcd\x3c\xd4\x4d\xbb\x59\x24\x84\x82\xf1\x8b\xe9\xa6\x85\xe5\x8b\x01\xb9\x63\xbc\x45\x82\x82\x64\x2e\xe8\x08\xf7\x78\x8c\xa0\xb1\xaa\xa5\xd1\x09\x63\x7a\x78\x10\x94\xdc\x09\x5a\xae\xe3\x78\xf5\x41\x5c\xf7\x23\x5a\x05\xbd\x17\xc5\xf9\x66\xdb\xba\xa0\xf1\xcd\x9f\x83\x64\x38\xbd\xd6\xdf\x53\xd7\x97\xec\x3c\x98\x67\x48\xb3\xbd\x60\xd8\x62\x2a\x0e\x19\x43\x1c\x41\xa5\xac\x72\xba\x0e\x41\xe8\xf4\xf9\x9a\x79\x29\xd7\x55\x81\x82\x1f\xfc\x3f\xa4\x94\xd6\x63\xaf\x6c\xb0\xfe\x6a\x1d\xc1\xe0\x81\x65\x8e\x25\x8b\xbc\x98\x40\x72\x20\xc2\x1d\x3f\x4d\x24\x02\x3f\x76\x95\xb2\xfe\xf7\x01\xef\x01\x00\x00\xff\xff\xdc\x5e\x7b\x7d\xff\x01\x00\x00")

func _000001_init_mgUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_mgUpSql,
		"000001_init_mg.up.sql",
	)
}

func _000001_init_mgUpSql() (*asset, error) {
	bytes, err := _000001_init_mgUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_mg.up.sql", size: 511, mode: os.FileMode(0644), modTime: time.Unix(1716069697, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1a, 0x9e, 0x3, 0x2a, 0xf, 0x8c, 0x9e, 0xe1, 0xda, 0x18, 0xf2, 0x1e, 0x4e, 0x63, 0x36, 0xd6, 0xac, 0x4f, 0x2c, 0xf4, 0xab, 0x8e, 0xef, 0xcc, 0x4b, 0x11, 0x24, 0x64, 0x2f, 0xb, 0x87, 0x4}}
	return a, nil
}

var __000002_init_mgDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4b\xc3\x30\x14\x87\xef\xfb\x2b\xde\x71\x83\x0a\x1d\x1e\x77\x7a\x76\xaf\x18\x6c\x5d\x79\xcd\xc4\x9d\x24\x4d\xda\x2a\xa6\x99\x34\x0d\xfb\xf7\xc5\x29\x13\xa3\x05\xaf\xbf\x2f\x7c\xf9\x78\x5b\xde\x55\x20\xf1\xa6\x20\x10\x39\xd0\xa3\xa8\x65\x0d\xc1\xb7\xa3\xdf\x2c\xfe\x64\xc7\xd1\xcc\x43\xdd\xf5\x9b\x45\xc6\x84\x92\xbe\x98\xee\x7a\x58\xbe\x18\xa8\x89\x05\x16\x50\xb1\x28\x91\x0f\x70\x47\x87\x04\x3a\xab\x7a\x0e\x0e\x8d\x19\xe1\x01\x39\xbb\x45\x5e\xae\xd3\x74\xf5\x41\xdc\xf0\x63\x5a\x45\xda\x73\xe1\xac\xd8\xf6\x2e\x12\xbe\xf9\x53\xb4\x4c\xc7\xd7\xf6\xfb\xd5\xf5\x79\x3b\x4d\xe6\x19\xf2\x62\x87\x12\xb6\x94\xe3\xbe\x90\x90\x26\xd0\x28\xab\x9c\x6e\x63\x10\x27\x7d\x1e\x66\xb6\xc9\x0d\x4d\x54\xe0\x27\xff\x8f\x26\xa5\x75\x18\x95\x8d\x7e\xbf\x5a\x27\x30\x79\x90\xa2\xa4\x5a\x62\x59\x5d\x40\xb6\x67\xa6\x7b\xf9\x74\x21\x09\xf8\x30\x34\xca\xfa\xdf\xfd\xef\x01\x00\x00\xff\xff\x84\xa1\xc1\x98\xfc\x01\x00\x00")

func _000002_init_mgDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_mgDownSql,
		"000002_init_mg.down.sql",
	)
}

func _000002_init_mgDownSql() (*asset, error) {
	bytes, err := _000002_init_mgDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_mg.down.sql", size: 508, mode: os.FileMode(0644), modTime: time.Unix(1716069705, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0x92, 0x35, 0xc6, 0xc5, 0xad, 0x78, 0x26, 0xbc, 0x4e, 0x2b, 0x94, 0x8c, 0x38, 0x65, 0x29, 0x92, 0x69, 0x9b, 0x17, 0x98, 0xbf, 0xf5, 0x3c, 0xb, 0xae, 0xa3, 0xa1, 0x54, 0xa6, 0xa7, 0x69}}
	return a, nil
}

var __000002_init_mgUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4b\xc3\x30\x14\x87\xef\xfb\x2b\xde\x71\x83\x0a\x1d\x1e\x77\x7a\x76\xaf\x18\x6c\x5d\x79\xcd\xc4\x9d\x24\x4d\xda\x2a\xa6\x99\x34\x0d\xfb\xf7\xc5\x29\x13\xa3\x05\xaf\xbf\x2f\x7c\xf9\x78\x5b\xde\x55\x20\xf1\xa6\x20\x10\x39\xd0\xa3\xa8\x65\x0d\xc1\xb7\xa3\xdf\x2c\xfe\x64\xc7\xd1\xcc\x43\xdd\xf5\x9b\x45\xc6\x84\x92\xbe\x98\xee\x7a\x58\xbe\x18\xa8\x89\x05\x16\x50\xb1\x28\x91\x0f\x70\x47\x87\x04\x3a\xab\x7a\x0e\x0e\x8d\x19\xe1\x01\x39\xbb\x45\x5e\xae\xd3\x74\xf5\x41\xdc\xf0\x63\x5a\x45\xda\x73\xe1\xac\xd8\xf6\x2e\x12\xbe\xf9\x53\xb4\x4c\xc7\xd7\xf6\xfb\xd5\xf5\x79\x3b\x4d\xe6\x19\xf2\x62\x87\x12\xb6\x94\xe3\xbe\x90\x90\x26\xd0\x28\xab\x9c\x6e\x63\x10\x27\x7d\x1e\x66\xb6\xc9\x0d\x4d\x54\xe0\x27\xff\x8f\x26\xa5\x75\x18\x95\x8d\x7e\xbf\x5a\x27\x30\x79\x90\xa2\xa4\x5a\x62\x59\x5d\x40\xb6\x67\xa6\x7b\xf9\x74\x21\x09\xf8\x30\x34\xca\xfa\xdf\xfd\xef\x01\x00\x00\xff\xff\x84\xa1\xc1\x98\xfc\x01\x00\x00")

func _000002_init_mgUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_mgUpSql,
		"000002_init_mg.up.sql",
	)
}

func _000002_init_mgUpSql() (*asset, error) {
	bytes, err := _000002_init_mgUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_mg.up.sql", size: 508, mode: os.FileMode(0644), modTime: time.Unix(1716069710, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0x92, 0x35, 0xc6, 0xc5, 0xad, 0x78, 0x26, 0xbc, 0x4e, 0x2b, 0x94, 0x8c, 0x38, 0x65, 0x29, 0x92, 0x69, 0x9b, 0x17, 0x98, 0xbf, 0xf5, 0x3c, 0xb, 0xae, 0xa3, 0xa1, 0x54, 0xa6, 0xa7, 0x69}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_mg.down.sql": _000001_init_mgDownSql,
	"000001_init_mg.up.sql":   _000001_init_mgUpSql,
	"000002_init_mg.down.sql": _000002_init_mgDownSql,
	"000002_init_mg.up.sql":   _000002_init_mgUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_mg.down.sql": {_000001_init_mgDownSql, map[string]*bintree{}},
	"000001_init_mg.up.sql":   {_000001_init_mgUpSql, map[string]*bintree{}},
	"000002_init_mg.down.sql": {_000002_init_mgDownSql, map[string]*bintree{}},
	"000002_init_mg.up.sql":   {_000002_init_mgUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
