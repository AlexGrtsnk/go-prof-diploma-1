// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_init_mg.down.sql (492B)
// 000001_init_mg.up.sql (492B)
// 000002_init_mg.down.sql (489B)
// 000002_init_mg.up.sql (489B)

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_mgDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4b\xc3\x40\x10\x85\xef\xfd\x15\x73\x6c\x21\x42\x8a\xc7\x9e\xc6\x74\xaa\x8b\x4d\x0d\x93\xa9\xd8\x93\xa4\xd9\x26\x8a\x49\x2a\x99\x5d\xfa\xf7\xc5\x2a\x11\xd7\x06\xbc\xbe\x6f\x79\xdf\xdb\x59\xf2\x43\x06\x82\x37\x6b\x02\xb3\x02\x7a\x32\xb9\xe4\xe0\xf5\xd0\xeb\x62\x72\x91\x1d\x7b\x3b\x0e\xcb\xaa\x5e\x4c\x12\x26\x14\xfa\x66\x65\x55\xc3\xf4\xd5\x82\xd9\x08\xdd\x12\x43\xc6\x26\x45\xde\xc1\x3d\xed\x22\xa8\x9a\xa2\x66\xdf\xa1\xb5\x3d\x3c\x22\x27\x77\xc8\xd3\x79\x1c\xcf\x3e\x49\xd7\xfe\x8a\x66\x41\xef\x79\xe2\x78\x73\x53\x77\x41\xe3\xbb\x9e\x82\xc4\x1d\xdf\x0e\x3f\xaf\xae\xcf\xd9\xc9\xd9\x97\xa1\x71\x49\x2b\xdc\xae\x05\xe2\x50\xfe\x75\x83\x71\x7b\xd7\xee\x03\x97\x3a\xfd\x87\xbd\x28\x4b\xdf\x17\xcd\x9f\x01\x57\xf3\x08\x9c\x82\x98\x94\x72\xc1\x34\x1b\x40\xb2\x65\xa6\x8d\x3c\x0f\x24\x02\xf5\xed\xbe\x68\xf4\xd2\x27\x3e\x02\x00\x00\xff\xff\xdd\xbb\x59\x0e\xec\x01\x00\x00")

func _000001_init_mgDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_mgDownSql,
		"000001_init_mg.down.sql",
	)
}

func _000001_init_mgDownSql() (*asset, error) {
	bytes, err := _000001_init_mgDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_mg.down.sql", size: 492, mode: os.FileMode(0644), modTime: time.Unix(1716057556, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0x32, 0xc, 0x19, 0x65, 0xeb, 0x48, 0x94, 0xa8, 0x56, 0x65, 0x43, 0xc2, 0x25, 0xac, 0x2f, 0x53, 0x5b, 0x51, 0x27, 0x11, 0x43, 0xca, 0x16, 0x43, 0xea, 0x38, 0xcf, 0xe, 0x7c, 0x5, 0xea}}
	return a, nil
}

var __000001_init_mgUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4b\xc3\x40\x10\x85\xef\xfd\x15\x73\x6c\x21\x42\x8a\xc7\x9e\xc6\x74\xaa\x8b\x4d\x0d\x93\xa9\xd8\x93\xa4\xd9\x26\x8a\x49\x2a\x99\x5d\xfa\xf7\xc5\x2a\x11\xd7\x06\xbc\xbe\x6f\x79\xdf\xdb\x59\xf2\x43\x06\x82\x37\x6b\x02\xb3\x02\x7a\x32\xb9\xe4\xe0\xf5\xd0\xeb\x62\x72\x91\x1d\x7b\x3b\x0e\xcb\xaa\x5e\x4c\x12\x26\x14\xfa\x66\x65\x55\xc3\xf4\xd5\x82\xd9\x08\xdd\x12\x43\xc6\x26\x45\xde\xc1\x3d\xed\x22\xa8\x9a\xa2\x66\xdf\xa1\xb5\x3d\x3c\x22\x27\x77\xc8\xd3\x79\x1c\xcf\x3e\x49\xd7\xfe\x8a\x66\x41\xef\x79\xe2\x78\x73\x53\x77\x41\xe3\xbb\x9e\x82\xc4\x1d\xdf\x0e\x3f\xaf\xae\xcf\xd9\xc9\xd9\x97\xa1\x71\x49\x2b\xdc\xae\x05\xe2\x50\xfe\x75\x83\x71\x7b\xd7\xee\x03\x97\x3a\xfd\x87\xbd\x28\x4b\xdf\x17\xcd\x9f\x01\x57\xf3\x08\x9c\x82\x98\x94\x72\xc1\x34\x1b\x40\xb2\x65\xa6\x8d\x3c\x0f\x24\x02\xf5\xed\xbe\x68\xf4\xd2\x27\x3e\x02\x00\x00\xff\xff\xdd\xbb\x59\x0e\xec\x01\x00\x00")

func _000001_init_mgUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_mgUpSql,
		"000001_init_mg.up.sql",
	)
}

func _000001_init_mgUpSql() (*asset, error) {
	bytes, err := _000001_init_mgUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_mg.up.sql", size: 492, mode: os.FileMode(0644), modTime: time.Unix(1716057563, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa7, 0x32, 0xc, 0x19, 0x65, 0xeb, 0x48, 0x94, 0xa8, 0x56, 0x65, 0x43, 0xc2, 0x25, 0xac, 0x2f, 0x53, 0x5b, 0x51, 0x27, 0x11, 0x43, 0xca, 0x16, 0x43, 0xea, 0x38, 0xcf, 0xe, 0x7c, 0x5, 0xea}}
	return a, nil
}

var __000002_init_mgDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4f\x83\x40\x10\x85\xef\xfd\x15\xef\xd8\x26\x98\xd0\x78\xec\x69\xa4\x53\xdd\x08\x95\x0c\x5b\x63\x4f\x86\xb2\x05\x8d\x40\x0d\x03\xe9\xdf\x37\x56\x53\xe3\x5a\x12\xaf\xef\x9b\xbc\x6f\x66\x96\xf2\x90\xc2\xd2\x4d\xcc\x30\x2b\xf0\x93\xc9\x6c\x86\x41\xf7\x9d\x2e\x26\x17\xd9\xa1\x73\xe3\xb0\x28\xab\xc5\x24\x12\x26\xcb\xdf\xac\x28\x2b\x4c\x5f\x1d\x32\x16\x43\x31\x52\x31\x09\xc9\x16\xf7\xbc\x0d\x50\xd6\x79\x25\x43\x4b\xce\x75\x78\x24\x89\xee\x48\xa6\xf3\x30\x9c\x7d\x92\xb6\xf9\x15\xcd\xbc\xda\xd3\x86\xa3\xc5\x75\xd5\x7a\x85\xef\x7a\xf4\x92\xfe\xf0\xb6\xff\x99\xba\x3e\x65\xc7\xde\xbd\xc0\xac\x2d\xdf\xb2\x60\xc9\x2b\xda\xc4\x16\xa1\xef\xfe\xfa\xc0\xa8\xbc\x6d\x76\x9e\x4a\x7b\xfd\x87\x3c\x2f\x8a\xa1\xcb\xeb\x3f\xfe\xab\x79\x80\x5e\x61\x4d\xc2\x99\xa5\x24\x3d\x83\x68\x23\xc2\x6b\xfb\x7c\x26\x01\x74\x68\x76\x79\xad\x97\x6e\xf8\x08\x00\x00\xff\xff\x59\xf9\x57\x42\xe9\x01\x00\x00")

func _000002_init_mgDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_mgDownSql,
		"000002_init_mg.down.sql",
	)
}

func _000002_init_mgDownSql() (*asset, error) {
	bytes, err := _000002_init_mgDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_mg.down.sql", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1716057568, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x15, 0x0, 0xcf, 0x1e, 0x80, 0x37, 0x32, 0x7b, 0xef, 0x1, 0x99, 0x2d, 0x27, 0x5f, 0xb, 0x62, 0xc3, 0x2f, 0x75, 0x6c, 0x8a, 0xd9, 0xea, 0xf9, 0x13, 0xff, 0xdc, 0xe4, 0x9a, 0xd, 0x95}}
	return a, nil
}

var __000002_init_mgUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4f\x83\x40\x10\x85\xef\xfd\x15\xef\xd8\x26\x98\xd0\x78\xec\x69\xa4\x53\xdd\x08\x95\x0c\x5b\x63\x4f\x86\xb2\x05\x8d\x40\x0d\x03\xe9\xdf\x37\x56\x53\xe3\x5a\x12\xaf\xef\x9b\xbc\x6f\x66\x96\xf2\x90\xc2\xd2\x4d\xcc\x30\x2b\xf0\x93\xc9\x6c\x86\x41\xf7\x9d\x2e\x26\x17\xd9\xa1\x73\xe3\xb0\x28\xab\xc5\x24\x12\x26\xcb\xdf\xac\x28\x2b\x4c\x5f\x1d\x32\x16\x43\x31\x52\x31\x09\xc9\x16\xf7\xbc\x0d\x50\xd6\x79\x25\x43\x4b\xce\x75\x78\x24\x89\xee\x48\xa6\xf3\x30\x9c\x7d\x92\xb6\xf9\x15\xcd\xbc\xda\xd3\x86\xa3\xc5\x75\xd5\x7a\x85\xef\x7a\xf4\x92\xfe\xf0\xb6\xff\x99\xba\x3e\x65\xc7\xde\xbd\xc0\xac\x2d\xdf\xb2\x60\xc9\x2b\xda\xc4\x16\xa1\xef\xfe\xfa\xc0\xa8\xbc\x6d\x76\x9e\x4a\x7b\xfd\x87\x3c\x2f\x8a\xa1\xcb\xeb\x3f\xfe\xab\x79\x80\x5e\x61\x4d\xc2\x99\xa5\x24\x3d\x83\x68\x23\xc2\x6b\xfb\x7c\x26\x01\x74\x68\x76\x79\xad\x97\x6e\xf8\x08\x00\x00\xff\xff\x59\xf9\x57\x42\xe9\x01\x00\x00")

func _000002_init_mgUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_mgUpSql,
		"000002_init_mg.up.sql",
	)
}

func _000002_init_mgUpSql() (*asset, error) {
	bytes, err := _000002_init_mgUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_mg.up.sql", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1716057573, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x15, 0x0, 0xcf, 0x1e, 0x80, 0x37, 0x32, 0x7b, 0xef, 0x1, 0x99, 0x2d, 0x27, 0x5f, 0xb, 0x62, 0xc3, 0x2f, 0x75, 0x6c, 0x8a, 0xd9, 0xea, 0xf9, 0x13, 0xff, 0xdc, 0xe4, 0x9a, 0xd, 0x95}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_mg.down.sql": _000001_init_mgDownSql,
	"000001_init_mg.up.sql":   _000001_init_mgUpSql,
	"000002_init_mg.down.sql": _000002_init_mgDownSql,
	"000002_init_mg.up.sql":   _000002_init_mgUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_mg.down.sql": {_000001_init_mgDownSql, map[string]*bintree{}},
	"000001_init_mg.up.sql":   {_000001_init_mgUpSql, map[string]*bintree{}},
	"000002_init_mg.down.sql": {_000002_init_mgDownSql, map[string]*bintree{}},
	"000002_init_mg.up.sql":   {_000002_init_mgUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
