// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_init_mg.down.sql (486B)
// 000001_init_mg.up.sql (486B)
// 000002_init_mg.down.sql (483B)
// 000002_init_mg.up.sql (483B)

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_mgDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4f\x83\x50\x0c\xc7\xef\xfb\x14\x3d\x6e\x09\x26\x2c\x1e\x77\xaa\xac\xe8\x8b\xb0\x91\xd2\x19\x77\x32\x8c\x37\xd0\x08\xcc\x50\x5e\xf6\xf5\x8d\xd3\x60\x7c\x4a\xe2\xf5\xff\x6b\xfe\xbf\xb6\x6b\xde\x66\x20\x78\x93\x10\x98\x18\xe8\xd1\xe4\x92\x83\xd3\x63\xaf\xab\xd9\x9f\xec\xd4\xdb\x69\x58\x56\xf5\x6a\x16\x31\xa1\xd0\x17\x2b\xab\x1a\xe6\x2f\x16\xcc\x46\xe8\x96\x18\x32\x36\x29\xf2\x1e\xee\x69\x1f\x40\xd5\x14\x35\xbb\x0e\xad\xed\xe1\x01\x39\xba\x43\x9e\x2f\xc3\x70\xf1\x41\xba\xf6\x47\xb4\xf0\x7a\x2f\x2b\x4e\x37\x37\x75\xe7\x35\xbe\xe9\xd9\x4b\x86\xd3\xeb\xf1\x7b\xea\xfa\x92\x9d\x07\xfb\x0c\x71\xb2\x45\x81\x35\xc5\xb8\x4b\x04\x42\x5f\xfd\xf9\x81\x69\x77\xd7\x1e\x3c\x93\x0e\xfa\x0f\x77\x51\x96\xae\x2f\x1a\x4f\x7f\xb5\x0c\x60\x50\x10\x93\x52\x2e\x98\x66\x23\x88\x76\xcc\xb4\x91\xa7\x91\x04\xa0\xae\x3d\x14\x8d\xfe\x3e\xe0\x3d\x00\x00\xff\xff\x5a\x28\x21\x84\xe6\x01\x00\x00")

func _000001_init_mgDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_mgDownSql,
		"000001_init_mg.down.sql",
	)
}

func _000001_init_mgDownSql() (*asset, error) {
	bytes, err := _000001_init_mgDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_mg.down.sql", size: 486, mode: os.FileMode(0644), modTime: time.Unix(1716068812, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x60, 0x40, 0x13, 0x3f, 0x65, 0x3a, 0xce, 0xc0, 0x88, 0xf2, 0xac, 0xec, 0xf2, 0x4e, 0x8f, 0x6e, 0xab, 0xbd, 0xea, 0x2c, 0x88, 0x9b, 0xf3, 0x42, 0xb3, 0xb3, 0x77, 0xb4, 0xd1, 0x72, 0xda}}
	return a, nil
}

var __000001_init_mgUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4f\x83\x50\x0c\xc7\xef\xfb\x14\x3d\x6e\x09\x26\x2c\x1e\x77\xaa\xac\xe8\x8b\xb0\x91\xd2\x19\x77\x32\x8c\x37\xd0\x08\xcc\x50\x5e\xf6\xf5\x8d\xd3\x60\x7c\x4a\xe2\xf5\xff\x6b\xfe\xbf\xb6\x6b\xde\x66\x20\x78\x93\x10\x98\x18\xe8\xd1\xe4\x92\x83\xd3\x63\xaf\xab\xd9\x9f\xec\xd4\xdb\x69\x58\x56\xf5\x6a\x16\x31\xa1\xd0\x17\x2b\xab\x1a\xe6\x2f\x16\xcc\x46\xe8\x96\x18\x32\x36\x29\xf2\x1e\xee\x69\x1f\x40\xd5\x14\x35\xbb\x0e\xad\xed\xe1\x01\x39\xba\x43\x9e\x2f\xc3\x70\xf1\x41\xba\xf6\x47\xb4\xf0\x7a\x2f\x2b\x4e\x37\x37\x75\xe7\x35\xbe\xe9\xd9\x4b\x86\xd3\xeb\xf1\x7b\xea\xfa\x92\x9d\x07\xfb\x0c\x71\xb2\x45\x81\x35\xc5\xb8\x4b\x04\x42\x5f\xfd\xf9\x81\x69\x77\xd7\x1e\x3c\x93\x0e\xfa\x0f\x77\x51\x96\xae\x2f\x1a\x4f\x7f\xb5\x0c\x60\x50\x10\x93\x52\x2e\x98\x66\x23\x88\x76\xcc\xb4\x91\xa7\x91\x04\xa0\xae\x3d\x14\x8d\xfe\x3e\xe0\x3d\x00\x00\xff\xff\x5a\x28\x21\x84\xe6\x01\x00\x00")

func _000001_init_mgUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_mgUpSql,
		"000001_init_mg.up.sql",
	)
}

func _000001_init_mgUpSql() (*asset, error) {
	bytes, err := _000001_init_mgUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_mg.up.sql", size: 486, mode: os.FileMode(0644), modTime: time.Unix(1716068841, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x60, 0x40, 0x13, 0x3f, 0x65, 0x3a, 0xce, 0xc0, 0x88, 0xf2, 0xac, 0xec, 0xf2, 0x4e, 0x8f, 0x6e, 0xab, 0xbd, 0xea, 0x2c, 0x88, 0x9b, 0xf3, 0x42, 0xb3, 0xb3, 0x77, 0xb4, 0xd1, 0x72, 0xda}}
	return a, nil
}

var __000002_init_mgDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4f\x83\x40\x10\x85\xef\xfd\x15\xef\xd8\x26\x98\xd0\x78\xec\x69\xa4\x43\xdc\x08\x96\x0c\x5b\x63\x4f\x86\xb2\x05\x8d\x40\x0d\x03\xe9\xdf\x37\x56\x53\xe3\x2a\x89\xd7\xf7\x4d\xde\xf7\x66\x2d\x9b\x0c\x96\x6e\x12\x86\x89\xc1\x8f\x26\xb7\x39\x46\x3d\xf4\xba\x9a\xfd\xc9\x8e\xbd\x9b\x86\x65\x55\xaf\x66\x91\x30\x59\xfe\x62\x65\x55\x63\xfe\xe2\x90\xb3\x18\x4a\x90\x89\x49\x49\x76\xb8\xe3\x5d\x80\xaa\x29\x6a\x19\x3b\x72\xae\xc7\x03\x49\x74\x4b\x32\x5f\x86\xe1\xe2\x83\x74\xed\x8f\x68\xe1\xd5\x9e\x17\x4e\x16\x37\x75\xe7\x15\xbe\xe9\xc9\x4b\x86\xe3\xeb\xe1\xfb\xea\xfa\x9c\x9d\x06\xf7\x8c\x38\xd9\x90\xc5\x9a\x63\xda\x26\x16\xa1\x6f\xfe\xfc\x7f\x52\xdd\xb5\x7b\x4f\xa4\x83\xfe\x43\x5d\x94\xe5\xd8\x17\x8d\x67\xbf\x5a\x06\x18\x14\xd6\xa4\x9c\x5b\x4a\xb3\x0b\x88\xb6\x22\x7c\x6f\x9f\x2e\x24\x80\x8e\xed\xbe\x68\xf4\xf7\xfe\xf7\x00\x00\x00\xff\xff\xc1\x1e\xd2\xf5\xe3\x01\x00\x00")

func _000002_init_mgDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_mgDownSql,
		"000002_init_mg.down.sql",
	)
}

func _000002_init_mgDownSql() (*asset, error) {
	bytes, err := _000002_init_mgDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_mg.down.sql", size: 483, mode: os.FileMode(0644), modTime: time.Unix(1716068858, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0xf8, 0x9b, 0xde, 0xb1, 0xde, 0x3b, 0x78, 0x82, 0xcd, 0x7f, 0x6a, 0xf2, 0x95, 0x23, 0xa6, 0x7, 0xc1, 0xc8, 0xf0, 0x52, 0xdc, 0xf0, 0xf4, 0x6e, 0xbc, 0x14, 0xb5, 0x47, 0x88, 0x8e, 0xc2}}
	return a, nil
}

var __000002_init_mgUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x41\x4f\x83\x40\x10\x85\xef\xfd\x15\xef\xd8\x26\x98\xd0\x78\xec\x69\xa4\x43\xdc\x08\x96\x0c\x5b\x63\x4f\x86\xb2\x05\x8d\x40\x0d\x03\xe9\xdf\x37\x56\x53\xe3\x2a\x89\xd7\xf7\x4d\xde\xf7\x66\x2d\x9b\x0c\x96\x6e\x12\x86\x89\xc1\x8f\x26\xb7\x39\x46\x3d\xf4\xba\x9a\xfd\xc9\x8e\xbd\x9b\x86\x65\x55\xaf\x66\x91\x30\x59\xfe\x62\x65\x55\x63\xfe\xe2\x90\xb3\x18\x4a\x90\x89\x49\x49\x76\xb8\xe3\x5d\x80\xaa\x29\x6a\x19\x3b\x72\xae\xc7\x03\x49\x74\x4b\x32\x5f\x86\xe1\xe2\x83\x74\xed\x8f\x68\xe1\xd5\x9e\x17\x4e\x16\x37\x75\xe7\x15\xbe\xe9\xc9\x4b\x86\xe3\xeb\xe1\xfb\xea\xfa\x9c\x9d\x06\xf7\x8c\x38\xd9\x90\xc5\x9a\x63\xda\x26\x16\xa1\x6f\xfe\xfc\x7f\x52\xdd\xb5\x7b\x4f\xa4\x83\xfe\x43\x5d\x94\xe5\xd8\x17\x8d\x67\xbf\x5a\x06\x18\x14\xd6\xa4\x9c\x5b\x4a\xb3\x0b\x88\xb6\x22\x7c\x6f\x9f\x2e\x24\x80\x8e\xed\xbe\x68\xf4\xf7\xfe\xf7\x00\x00\x00\xff\xff\xc1\x1e\xd2\xf5\xe3\x01\x00\x00")

func _000002_init_mgUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_mgUpSql,
		"000002_init_mg.up.sql",
	)
}

func _000002_init_mgUpSql() (*asset, error) {
	bytes, err := _000002_init_mgUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_mg.up.sql", size: 483, mode: os.FileMode(0644), modTime: time.Unix(1716068874, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0xf8, 0x9b, 0xde, 0xb1, 0xde, 0x3b, 0x78, 0x82, 0xcd, 0x7f, 0x6a, 0xf2, 0x95, 0x23, 0xa6, 0x7, 0xc1, 0xc8, 0xf0, 0x52, 0xdc, 0xf0, 0xf4, 0x6e, 0xbc, 0x14, 0xb5, 0x47, 0x88, 0x8e, 0xc2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_mg.down.sql": _000001_init_mgDownSql,
	"000001_init_mg.up.sql":   _000001_init_mgUpSql,
	"000002_init_mg.down.sql": _000002_init_mgDownSql,
	"000002_init_mg.up.sql":   _000002_init_mgUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_mg.down.sql": {_000001_init_mgDownSql, map[string]*bintree{}},
	"000001_init_mg.up.sql":   {_000001_init_mgUpSql, map[string]*bintree{}},
	"000002_init_mg.down.sql": {_000002_init_mgDownSql, map[string]*bintree{}},
	"000002_init_mg.up.sql":   {_000002_init_mgUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
