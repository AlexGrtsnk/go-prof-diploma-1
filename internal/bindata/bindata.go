// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_init_mg.down.sql (518B)
// 000001_init_mg.up.sql (518B)
// 000002_init_mg.down.sql (515B)
// 000002_init_mg.up.sql (515B)

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_mgDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4b\xc3\x30\x14\x87\xef\xfb\x2b\xde\x71\x85\x0a\x29\x1e\x7b\x8a\xdd\xab\x06\xdb\xad\xbc\x66\xe2\x4e\x92\x26\x6d\x15\xd3\x4c\x9a\x96\xfd\xfb\xe2\x94\x89\x61\x05\xaf\xbf\xef\xf1\xf1\xf1\x36\xb4\xab\x40\xf2\xbb\x02\x41\xe4\x80\xcf\xa2\x96\x35\xcc\xbe\x1d\x7d\xba\xba\xca\x8e\xa3\x59\x86\xba\xeb\xd3\x55\x46\xc8\x25\xfe\x30\xdd\xf5\xb0\x7e\x33\x20\xb6\x12\xef\x91\xa0\x22\x51\x72\x3a\xc0\x23\x1e\x62\xe8\xac\xea\x69\x76\xdc\x98\x11\x9e\x38\x65\x0f\x9c\xd6\x09\x63\xd1\x17\x71\xc3\x9f\x29\x0a\xbc\xe7\xc4\x65\xb3\xed\x5d\x60\xfc\xf0\xa7\x60\x99\x8e\xef\xed\xef\xd5\xed\x79\x3b\x4d\xe6\x15\xf2\x62\xc7\x25\x6c\x30\xe7\xfb\x42\x42\xc2\x18\x8b\xa1\x51\x56\x39\xdd\x5e\x61\x2c\x4c\xfb\xfe\xd0\x72\x9b\x1b\x9a\xa0\xc4\x4f\xfe\x1f\x6d\x4a\xeb\x79\x54\x36\x48\xb8\x49\x62\x98\x3c\x48\x51\x62\x2d\x79\x59\x5d\x40\xb6\x27\xc2\xad\x7c\xb9\x90\x18\xfc\x3c\x34\xca\xfa\xc0\xc0\xa2\xf4\x33\x00\x00\xff\xff\xd0\xb4\x0b\x5c\x06\x02\x00\x00")

func _000001_init_mgDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_mgDownSql,
		"000001_init_mg.down.sql",
	)
}

func _000001_init_mgDownSql() (*asset, error) {
	bytes, err := _000001_init_mgDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_mg.down.sql", size: 518, mode: os.FileMode(0644), modTime: time.Unix(1716069992, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0x83, 0xc9, 0xf4, 0x88, 0x93, 0xc3, 0x1a, 0xa9, 0x82, 0x1f, 0x6d, 0xd0, 0x10, 0xa4, 0xc7, 0x85, 0x3f, 0xe, 0xb9, 0xa9, 0x86, 0xd6, 0xd9, 0xcd, 0xfe, 0x97, 0x98, 0x50, 0xf6, 0x55, 0xf8}}
	return a, nil
}

var __000001_init_mgUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x4b\xc3\x30\x14\x87\xef\xfb\x2b\xde\x71\x85\x0a\x29\x1e\x7b\x8a\xdd\xab\x06\xdb\xad\xbc\x66\xe2\x4e\x92\x26\x6d\x15\xd3\x4c\x9a\x96\xfd\xfb\xe2\x94\x89\x61\x05\xaf\xbf\xef\xf1\xf1\xf1\x36\xb4\xab\x40\xf2\xbb\x02\x41\xe4\x80\xcf\xa2\x96\x35\xcc\xbe\x1d\x7d\xba\xba\xca\x8e\xa3\x59\x86\xba\xeb\xd3\x55\x46\xc8\x25\xfe\x30\xdd\xf5\xb0\x7e\x33\x20\xb6\x12\xef\x91\xa0\x22\x51\x72\x3a\xc0\x23\x1e\x62\xe8\xac\xea\x69\x76\xdc\x98\x11\x9e\x38\x65\x0f\x9c\xd6\x09\x63\xd1\x17\x71\xc3\x9f\x29\x0a\xbc\xe7\xc4\x65\xb3\xed\x5d\x60\xfc\xf0\xa7\x60\x99\x8e\xef\xed\xef\xd5\xed\x79\x3b\x4d\xe6\x15\xf2\x62\xc7\x25\x6c\x30\xe7\xfb\x42\x42\xc2\x18\x8b\xa1\x51\x56\x39\xdd\x5e\x61\x2c\x4c\xfb\xfe\xd0\x72\x9b\x1b\x9a\xa0\xc4\x4f\xfe\x1f\x6d\x4a\xeb\x79\x54\x36\x48\xb8\x49\x62\x98\x3c\x48\x51\x62\x2d\x79\x59\x5d\x40\xb6\x27\xc2\xad\x7c\xb9\x90\x18\xfc\x3c\x34\xca\xfa\xc0\xc0\xa2\xf4\x33\x00\x00\xff\xff\xd0\xb4\x0b\x5c\x06\x02\x00\x00")

func _000001_init_mgUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_mgUpSql,
		"000001_init_mg.up.sql",
	)
}

func _000001_init_mgUpSql() (*asset, error) {
	bytes, err := _000001_init_mgUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_mg.up.sql", size: 518, mode: os.FileMode(0644), modTime: time.Unix(1716069976, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x71, 0x83, 0xc9, 0xf4, 0x88, 0x93, 0xc3, 0x1a, 0xa9, 0x82, 0x1f, 0x6d, 0xd0, 0x10, 0xa4, 0xc7, 0x85, 0x3f, 0xe, 0xb9, 0xa9, 0x86, 0xd6, 0xd9, 0xcd, 0xfe, 0x97, 0x98, 0x50, 0xf6, 0x55, 0xf8}}
	return a, nil
}

var __000002_init_mgDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4b\xc4\x30\x10\x46\xef\xfb\x2b\xe6\xb8\x85\x0a\x29\x1e\x7b\x1a\xbb\x29\x06\x5b\xb7\x4c\xb3\xe2\x9e\x24\x4d\xda\x2a\xa6\x59\x69\x5a\xf6\xef\x8b\xab\xac\x18\x5a\xf0\xfa\xbd\xe1\xf1\x98\x1d\xed\x2b\x90\x78\x57\x70\x10\x39\xf0\x67\x51\xcb\x1a\x66\xdf\x8e\x3e\xdd\x2c\xb2\xd3\x68\xd6\xa1\xee\xfa\x74\x93\x11\x47\xc9\x7f\x98\xee\x7a\xd8\xbe\x19\xa8\x39\x09\x2c\xa0\x22\x51\x22\x1d\xe1\x81\x1f\x63\xe8\xac\xea\x69\x76\x68\xcc\x08\x4f\x48\xd9\x3d\xd2\x36\x61\x2c\xfa\x22\x6e\xf8\x33\x45\x81\xf6\x52\xb8\x2a\xb6\xbd\x0b\x84\x1f\xfe\x1c\x2c\xd3\xe9\xbd\xfd\xbd\xba\xbd\x6c\xe7\xc9\xbc\x42\x5e\xec\x51\xc2\x8e\xe7\x78\x28\x24\x24\x8c\xb1\x18\x1a\x65\x95\xd3\xed\x02\x63\x61\xd9\xf7\x7f\x56\xd3\xdc\xd0\x04\x21\x7e\xf2\xff\x48\x53\x5a\xcf\xa3\xb2\x41\xc1\x4d\x12\xc3\xe4\x41\x8a\x92\xd7\x12\xcb\xea\x0a\xb2\x03\x11\x7f\x94\x2f\x57\x12\x83\x9f\x87\x46\x59\x1f\x18\x58\x94\x7e\x06\x00\x00\xff\xff\x2d\x23\x75\xad\x03\x02\x00\x00")

func _000002_init_mgDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_mgDownSql,
		"000002_init_mg.down.sql",
	)
}

func _000002_init_mgDownSql() (*asset, error) {
	bytes, err := _000002_init_mgDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_mg.down.sql", size: 515, mode: os.FileMode(0644), modTime: time.Unix(1716069999, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x78, 0xaa, 0x88, 0xa1, 0x47, 0xd1, 0xeb, 0x96, 0x50, 0x52, 0x1d, 0x1d, 0x7, 0x57, 0xd3, 0x83, 0x8a, 0x5a, 0xad, 0xc6, 0x33, 0x25, 0xdd, 0x46, 0xf9, 0x3e, 0x79, 0x2e, 0xd6, 0x3e, 0xaf}}
	return a, nil
}

var __000002_init_mgUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4b\xc4\x30\x10\x46\xef\xfb\x2b\xe6\xb8\x85\x0a\x29\x1e\x7b\x1a\xbb\x29\x06\x5b\xb7\x4c\xb3\xe2\x9e\x24\x4d\xda\x2a\xa6\x59\x69\x5a\xf6\xef\x8b\xab\xac\x18\x5a\xf0\xfa\xbd\xe1\xf1\x98\x1d\xed\x2b\x90\x78\x57\x70\x10\x39\xf0\x67\x51\xcb\x1a\x66\xdf\x8e\x3e\xdd\x2c\xb2\xd3\x68\xd6\xa1\xee\xfa\x74\x93\x11\x47\xc9\x7f\x98\xee\x7a\xd8\xbe\x19\xa8\x39\x09\x2c\xa0\x22\x51\x22\x1d\xe1\x81\x1f\x63\xe8\xac\xea\x69\x76\x68\xcc\x08\x4f\x48\xd9\x3d\xd2\x36\x61\x2c\xfa\x22\x6e\xf8\x33\x45\x81\xf6\x52\xb8\x2a\xb6\xbd\x0b\x84\x1f\xfe\x1c\x2c\xd3\xe9\xbd\xfd\xbd\xba\xbd\x6c\xe7\xc9\xbc\x42\x5e\xec\x51\xc2\x8e\xe7\x78\x28\x24\x24\x8c\xb1\x18\x1a\x65\x95\xd3\xed\x02\x63\x61\xd9\xf7\x7f\x56\xd3\xdc\xd0\x04\x21\x7e\xf2\xff\x48\x53\x5a\xcf\xa3\xb2\x41\xc1\x4d\x12\xc3\xe4\x41\x8a\x92\xd7\x12\xcb\xea\x0a\xb2\x03\x11\x7f\x94\x2f\x57\x12\x83\x9f\x87\x46\x59\x1f\x18\x58\x94\x7e\x06\x00\x00\xff\xff\x2d\x23\x75\xad\x03\x02\x00\x00")

func _000002_init_mgUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_mgUpSql,
		"000002_init_mg.up.sql",
	)
}

func _000002_init_mgUpSql() (*asset, error) {
	bytes, err := _000002_init_mgUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_mg.up.sql", size: 515, mode: os.FileMode(0644), modTime: time.Unix(1716070007, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf6, 0x78, 0xaa, 0x88, 0xa1, 0x47, 0xd1, 0xeb, 0x96, 0x50, 0x52, 0x1d, 0x1d, 0x7, 0x57, 0xd3, 0x83, 0x8a, 0x5a, 0xad, 0xc6, 0x33, 0x25, 0xdd, 0x46, 0xf9, 0x3e, 0x79, 0x2e, 0xd6, 0x3e, 0xaf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_mg.down.sql": _000001_init_mgDownSql,
	"000001_init_mg.up.sql":   _000001_init_mgUpSql,
	"000002_init_mg.down.sql": _000002_init_mgDownSql,
	"000002_init_mg.up.sql":   _000002_init_mgUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_mg.down.sql": {_000001_init_mgDownSql, map[string]*bintree{}},
	"000001_init_mg.up.sql":   {_000001_init_mgUpSql, map[string]*bintree{}},
	"000002_init_mg.down.sql": {_000002_init_mgDownSql, map[string]*bintree{}},
	"000002_init_mg.up.sql":   {_000002_init_mgUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
