// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_init_mg.down.sql (492B)
// 000001_init_mg.up.sql (492B)
// 000002_init_mg.down.sql (489B)
// 000002_init_mg.up.sql (489B)

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_mgDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x4f\xc2\x40\x10\x85\xef\xfc\x8a\x39\x42\x52\x93\x12\x8f\x9c\xc6\x32\xe8\x46\x8a\xcd\x74\x30\x72\x32\xa5\x4b\xab\xb1\x2d\xa6\xb3\x1b\xfe\xbe\x11\x4d\x13\x57\xca\xf5\x7d\x9b\xef\xbd\x9d\x25\x3f\x65\x20\x78\xb7\x26\x30\x2b\xa0\x17\x93\x4b\x0e\x5e\x0f\xbd\x2e\x26\x17\xd9\xb1\xb7\xe3\xb0\xac\xea\xc5\x24\x61\x42\xa1\x5f\x56\x56\x35\x4c\xdf\x2d\x98\x8d\xd0\x3d\x31\x64\x6c\x52\xe4\x1d\x3c\xd2\x2e\x82\xaa\x29\x6a\xf6\x1d\x5a\xdb\xc3\x33\x72\xf2\x80\x3c\x9d\xc7\xf1\xec\x9b\x74\xed\x9f\x68\x16\x78\xcf\x13\xc7\xcd\x4d\xdd\x05\xc6\x4f\x3d\x05\x89\x3b\x7e\x1c\xc2\x57\x27\x67\xdf\x06\xe3\x92\x56\xb8\x5d\x0b\xc4\x61\xf9\xcf\x0d\xc6\xdb\xbb\x76\x1f\x78\xd5\xe9\xd5\xf6\xdb\x73\x56\x94\xa5\xef\x8b\xe6\xdf\x80\x9b\x79\x04\x4e\x41\x4c\x4a\xb9\x60\x9a\x0d\x20\xd9\x32\xd3\x46\x5e\x07\x12\x81\xfa\x76\x5f\x34\x7a\xe9\x13\x5f\x01\x00\x00\xff\xff\x65\x2c\x5d\x22\xec\x01\x00\x00")

func _000001_init_mgDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_mgDownSql,
		"000001_init_mg.down.sql",
	)
}

func _000001_init_mgDownSql() (*asset, error) {
	bytes, err := _000001_init_mgDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_mg.down.sql", size: 492, mode: os.FileMode(0644), modTime: time.Unix(1716055802, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x25, 0x92, 0x17, 0xd8, 0x1b, 0x16, 0xf3, 0x65, 0xa2, 0xdc, 0x41, 0x35, 0x4d, 0xdf, 0x62, 0x58, 0x50, 0xdc, 0xdd, 0x82, 0xfc, 0xe6, 0x38, 0x35, 0x1d, 0xa0, 0x21, 0x7c, 0x39, 0xe9, 0x82}}
	return a, nil
}

var __000001_init_mgUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x4f\xc2\x40\x10\x85\xef\xfc\x8a\x39\x42\x52\x93\x12\x8f\x9c\xc6\x32\xe8\x46\x8a\xcd\x74\x30\x72\x32\xa5\x4b\xab\xb1\x2d\xa6\xb3\x1b\xfe\xbe\x11\x4d\x13\x57\xca\xf5\x7d\x9b\xef\xbd\x9d\x25\x3f\x65\x20\x78\xb7\x26\x30\x2b\xa0\x17\x93\x4b\x0e\x5e\x0f\xbd\x2e\x26\x17\xd9\xb1\xb7\xe3\xb0\xac\xea\xc5\x24\x61\x42\xa1\x5f\x56\x56\x35\x4c\xdf\x2d\x98\x8d\xd0\x3d\x31\x64\x6c\x52\xe4\x1d\x3c\xd2\x2e\x82\xaa\x29\x6a\xf6\x1d\x5a\xdb\xc3\x33\x72\xf2\x80\x3c\x9d\xc7\xf1\xec\x9b\x74\xed\x9f\x68\x16\x78\xcf\x13\xc7\xcd\x4d\xdd\x05\xc6\x4f\x3d\x05\x89\x3b\x7e\x1c\xc2\x57\x27\x67\xdf\x06\xe3\x92\x56\xb8\x5d\x0b\xc4\x61\xf9\xcf\x0d\xc6\xdb\xbb\x76\x1f\x78\xd5\xe9\xd5\xf6\xdb\x73\x56\x94\xa5\xef\x8b\xe6\xdf\x80\x9b\x79\x04\x4e\x41\x4c\x4a\xb9\x60\x9a\x0d\x20\xd9\x32\xd3\x46\x5e\x07\x12\x81\xfa\x76\x5f\x34\x7a\xe9\x13\x5f\x01\x00\x00\xff\xff\x65\x2c\x5d\x22\xec\x01\x00\x00")

func _000001_init_mgUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_mgUpSql,
		"000001_init_mg.up.sql",
	)
}

func _000001_init_mgUpSql() (*asset, error) {
	bytes, err := _000001_init_mgUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_mg.up.sql", size: 492, mode: os.FileMode(0644), modTime: time.Unix(1716055815, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0x25, 0x92, 0x17, 0xd8, 0x1b, 0x16, 0xf3, 0x65, 0xa2, 0xdc, 0x41, 0x35, 0x4d, 0xdf, 0x62, 0x58, 0x50, 0xdc, 0xdd, 0x82, 0xfc, 0xe6, 0x38, 0x35, 0x1d, 0xa0, 0x21, 0x7c, 0x39, 0xe9, 0x82}}
	return a, nil
}

var __000002_init_mgDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x4f\xc2\x40\x10\x46\xef\xfc\x8a\xef\x08\x49\x4d\x4a\x3c\x72\x1a\xcb\xa0\x1b\x5b\x6c\xa6\x8b\x91\x93\x29\x5d\x5a\x8d\x6d\x31\x9d\x36\xfc\x7d\x23\x1a\x12\x57\xca\xf5\x7b\x9b\xf7\x76\x77\x29\x4f\x29\x2c\xdd\xc5\x0c\xb3\x02\xbf\x98\xcc\x66\x18\x74\xdf\xe9\x62\x72\x91\x1d\x3a\x37\x0e\x8b\xb2\x5a\x4c\x22\x61\xb2\xfc\xcb\x8a\xb2\xc2\xf4\xdd\x21\x63\x31\x14\x23\x15\x93\x90\x6c\xf1\xc8\xdb\x00\x65\x9d\x57\x32\xb4\xe4\x5c\x87\x67\x92\xe8\x81\x64\x3a\x0f\xc3\xd9\x37\x69\x9b\x3f\xd3\xcc\xd3\x9e\x6e\x38\x2a\xae\xab\xd6\x13\x7e\xea\xd1\x5b\xfa\xc3\xc7\xde\x3f\x75\xec\xdd\x1b\xcc\xda\xf2\x3d\x0b\x96\xbc\xa2\x4d\x6c\x11\xfa\xed\x9f\x1f\x18\x8d\xb7\xcd\xce\xd3\x6a\xaf\x57\xe3\xb7\xa7\x2d\x2f\x8a\xa1\xcb\xeb\x7f\xfd\x9b\x79\x80\x5e\x61\x4d\xc2\x99\xa5\x24\x3d\x83\x68\x23\xc2\x6b\xfb\x7a\x26\x01\x74\x68\x76\x79\xad\x97\xde\xf0\x15\x00\x00\xff\xff\xe7\xca\x5e\x9f\xe9\x01\x00\x00")

func _000002_init_mgDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_mgDownSql,
		"000002_init_mg.down.sql",
	)
}

func _000002_init_mgDownSql() (*asset, error) {
	bytes, err := _000002_init_mgDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_mg.down.sql", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1716055857, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x29, 0xa2, 0xaf, 0x37, 0xfc, 0x18, 0xb5, 0x2b, 0xa, 0x4c, 0xbf, 0x84, 0x82, 0x83, 0xdf, 0xc9, 0xda, 0xda, 0xa6, 0x3e, 0x4, 0x13, 0x4f, 0x68, 0x19, 0x1b, 0x40, 0xf2, 0x97, 0x3c, 0xb6}}
	return a, nil
}

var __000002_init_mgUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x4f\xc2\x40\x10\x46\xef\xfc\x8a\xef\x08\x49\x4d\x4a\x3c\x72\x1a\xcb\xa0\x1b\x5b\x6c\xa6\x8b\x91\x93\x29\x5d\x5a\x8d\x6d\x31\x9d\x36\xfc\x7d\x23\x1a\x12\x57\xca\xf5\x7b\x9b\xf7\x76\x77\x29\x4f\x29\x2c\xdd\xc5\x0c\xb3\x02\xbf\x98\xcc\x66\x18\x74\xdf\xe9\x62\x72\x91\x1d\x3a\x37\x0e\x8b\xb2\x5a\x4c\x22\x61\xb2\xfc\xcb\x8a\xb2\xc2\xf4\xdd\x21\x63\x31\x14\x23\x15\x93\x90\x6c\xf1\xc8\xdb\x00\x65\x9d\x57\x32\xb4\xe4\x5c\x87\x67\x92\xe8\x81\x64\x3a\x0f\xc3\xd9\x37\x69\x9b\x3f\xd3\xcc\xd3\x9e\x6e\x38\x2a\xae\xab\xd6\x13\x7e\xea\xd1\x5b\xfa\xc3\xc7\xde\x3f\x75\xec\xdd\x1b\xcc\xda\xf2\x3d\x0b\x96\xbc\xa2\x4d\x6c\x11\xfa\xed\x9f\x1f\x18\x8d\xb7\xcd\xce\xd3\x6a\xaf\x57\xe3\xb7\xa7\x2d\x2f\x8a\xa1\xcb\xeb\x7f\xfd\x9b\x79\x80\x5e\x61\x4d\xc2\x99\xa5\x24\x3d\x83\x68\x23\xc2\x6b\xfb\x7a\x26\x01\x74\x68\x76\x79\xad\x97\xde\xf0\x15\x00\x00\xff\xff\xe7\xca\x5e\x9f\xe9\x01\x00\x00")

func _000002_init_mgUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_mgUpSql,
		"000002_init_mg.up.sql",
	)
}

func _000002_init_mgUpSql() (*asset, error) {
	bytes, err := _000002_init_mgUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_mg.up.sql", size: 489, mode: os.FileMode(0644), modTime: time.Unix(1716055871, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x29, 0xa2, 0xaf, 0x37, 0xfc, 0x18, 0xb5, 0x2b, 0xa, 0x4c, 0xbf, 0x84, 0x82, 0x83, 0xdf, 0xc9, 0xda, 0xda, 0xa6, 0x3e, 0x4, 0x13, 0x4f, 0x68, 0x19, 0x1b, 0x40, 0xf2, 0x97, 0x3c, 0xb6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_mg.down.sql": _000001_init_mgDownSql,
	"000001_init_mg.up.sql":   _000001_init_mgUpSql,
	"000002_init_mg.down.sql": _000002_init_mgDownSql,
	"000002_init_mg.up.sql":   _000002_init_mgUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_mg.down.sql": {_000001_init_mgDownSql, map[string]*bintree{}},
	"000001_init_mg.up.sql":   {_000001_init_mgUpSql, map[string]*bintree{}},
	"000002_init_mg.down.sql": {_000002_init_mgDownSql, map[string]*bintree{}},
	"000002_init_mg.up.sql":   {_000002_init_mgUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
